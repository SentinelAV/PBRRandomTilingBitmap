// Lookup a bitmap and make random variations so no tiling is evident
// RandomTilingBitmap.osl, by Zap Andersson
// Modified: 2022-12-17, by Thomas Crotty
// Copyright 2020 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/license/LICENSE.txt

shader RandomTilingBitmap
[[ string help  = 
    "<h3>Bitmap Random Tiling</h3>"
	"Look up a bitmap from passed in UV coordinates and modify each "
	"repetition of the bitmap such that tiling is not evident. Has "
	"a mode to properly transform normal maps. Outputs the "
	"modified UV so it can be hooked up to other Bitmap Lookup shaders "
	"to apply the identical randomness, plus outputs the Random Index "
	"itself to drive downstream modifications that are in sync with it.",
   string label = "Bitmap Random Tiling",
   string version = "1.0" ]]
(  
  point  Pos   = point(u,v,0) 
  	[[  string label= "UV Coordinates", 
  		string help = "The 2D coordinate at which the texture is looked up." ]],
  		
  float  Scale  = 0.25
  	[[  string label= "UV Scale", 
  		string help = "A linear scale factor. For more complex UV manipulation, connect the UVWTransform." ]], 
  
  string Albedo = "" 
  	[[  string widget="filename", 
  	    string label="Base Color",
  	    string help="Path to the albedo map" ]], 
  string Metalness = "" 
  	[[  string widget="filename", 
  	    string label="Metalness",
  	    string help="Path to the metal map" ]], 
  string Roughness = "" 
  	[[  string widget="filename", 
  	    string label="Roughness",
  	    string help="Path to the roughness map" ]], 
  string AO = "" 
  	[[  string widget="filename", 
  	    string label="AO",
  	    string help="Path to the roughness map" ]],   	    
  string Normal = "" 
  	[[  string widget="filename", 
  	    string label="Normal",
  	    string help="Path to the roughness map" ]],     
  string Emission = "" 
  	[[  string widget="filename", 
  	    string label="Emission",
  	    string help="Path to the roughness map" ]],   	    
  string Opacity = "" 
  	[[  string widget="filename", 
  	    string label="Opacity",
  	    string help="Path to the roughness map" ]],     
  string Displace = "" 
  	[[  string widget="filename", 
  	    string label="Displacement",
  	    string help="Path to the roughness map" ]], 
  	    
  string WrapMode = "periodic"
  	[[  string widget="popup", string options = "default|clamp|periodic|mirror",
  	    string label="Wrap Mode",
  	    string help="How the texture wraps: (black, clamp, periodic or mirror)." ]],	
  	    	      	      	    
  int   AutoGamma   = 1   
  	[[  string widget="checkBox", 
  		string label="Base Color Auto Gamma",
  	    int connectable=0]],
  	    
  float ManualGamma = 1.0 
  	[[  string label="Manual Gamma" ]], 	  	  	  	
    	      	      	      	    
  int   NormalFlipR = 0 
  	[[  string widget="checkBox", 
		string packName = "Normal Map",
		string label    = "Normal Flip R",
		int connectable = 0,
  	    string help="Invert red component for rotation of normal maps." ]],
  int   NormalFlipG = 0 
  	[[  string widget="checkBox", 
		string packName = "Normal Map",
		string label    = "Normal Flip G",
		int connectable = 0,  	
	  	string help="Invert green component for rotation of normal maps." ]], 
  	    
  int   Seed = 0 
    [[  string help = "Random seed. Connect to e.g. Node Handle map to have per-object randomness" ]],

  float RandScale    = 1.0
    [[  
		string label = "Random Tile Scale",
		string help = 
    	  "Scale of the 'distorted grid' in relation to UV space. "
    	  "A value of 1.0 means the 'distorted grid' is the same size as a "
    	  "unit square in UV space, a smaller number makes the grid smaller and "
    	  "a larger value makes it larger. "
    	  "A value of zero disables spatially varying randomness "
    	  "but still makes a variation per Seed value. If Seed is driven from "
    	  "e.g. a Node Handle map, this gives one random value per object." ]], 
		
  float EdgeFuzz     = 0.1  
  	[[  float min=0.0, float max=10.0,
  	    string help="Amount of 'crossfade' at the edge of the randomness grid."
  	]],
  	
  vector HSVMin   = vector(0.0,1.0,1.0),
  vector HSVMax   = vector(0.0,1.0,1.0),
     	    
  float RotMin = 0.0     [[ float min=-360.0, float max=360.0, string packName = "Rotation Min/Max" ]],
  float RotMax   = 360.0 [[ float min=-360.0, float max=360.0, string packName = "Rotation Min/Max" ]],

  float UOffset = 0.0 [[string packName = "Position Offset U/V" ]],
  float VOffset = 0.0 [[string packName = "Position Offset U/V" ]], 
        
  float ScaleMin = 1.0   [[ float min= 0.1, float max=100.0, string packName = "Scale Min/Max" ]],
  float ScaleMax = 1.0   [[ float min= 0.1, float max=100.0, string packName = "Scale Min/Max" ]],
  float ScaleCurve = 1,
  int   ScaleMult = 0    [[ string widget="checkBox", string label = "Multiply by scale", string help = "Multiplies the displacement and normal map by tile scale." ]],
  
  output color outAlbedo = 0     [[ string label="Base Color" ]],
  output color outMetal  = 0     [[ string label="Metalness"  ]],
  output color outRough  = 0     [[ string label="Roughness"  ]],
  output color outAO     = 0     [[ string label="AO"     ]],
  output color outNorm   = 0     [[ string label="Normal"   ]],
  output color outEmit   = 0     [[ string label="Emission"   ]],
  output color outOpac   = 0     [[ string label="Opacity"   ]],  
  output color outDisp   = 0     [[ string label="Displacement"   ]],
)
{
	point p = Pos / Scale;		
	point noisepoint = p / RandScale / 2;
	float E = 20/EdgeFuzz;	
	
	// Compute grid and mask	
	point grid1 = noisepoint;
	point grid2 = noisepoint-point(0.5,0.0,0.0);	
	point grid3 = noisepoint-point(0.0,-0.5,0.0);	
	point grid4 = noisepoint-point(0.5,-0.5,0.0);
	float mask1 = -cos(3.1415927*clamp((abs(mod(E*p[0]/RandScale+E,2*E)-E)-E/2+1)/2,0,1))/2+.5;	
	float mask2 = -cos(3.1415927*clamp((abs(mod(E*p[1]/RandScale+E,2*E)-E)-E/2+1)/2,0,1))/2+.5;
	
	// Compute random offsets				
	point rotscale1  = noise("cell", grid1, Seed + 10);
	point rotscale2  = noise("cell", grid2, Seed + 13);
	point rotscale3  = noise("cell", grid3, Seed + 16);
	point rotscale4  = noise("cell", grid4, Seed + 19);
	
	point position1  = noise("cell", grid1, Seed + 11);	
	point position2  = noise("cell", grid2, Seed + 14);
	point position3  = noise("cell", grid3, Seed + 17);
	point position4  = noise("cell", grid4, Seed + 20);	
	
	point hsvchange1 = noise("cell", grid1, Seed + 12);			
	point hsvchange2 = noise("cell", grid2, Seed + 15);			
	point hsvchange3 = noise("cell", grid3, Seed + 18);		
	point hsvchange4 = noise("cell", grid4, Seed + 21);	
	
	// Compute the actual rotation (in radians)	
	float rotation1 = radians(mix(RotMin, RotMax, rotscale1[0]));
	float rotation2 = radians(mix(RotMin, RotMax, rotscale2[0]));
	float rotation3 = radians(mix(RotMin, RotMax, rotscale3[0]));
	float rotation4 = radians(mix(RotMin, RotMax, rotscale4[0]));

	// Compute HSV variation
	vector hsvTweak1 = mix(HSVMin, HSVMax, hsvchange1);
	vector hsvTweak2 = mix(HSVMin, HSVMax, hsvchange2);
	vector hsvTweak3 = mix(HSVMin, HSVMax, hsvchange3);
	vector hsvTweak4 = mix(HSVMin, HSVMax, hsvchange4);
	
	// Compute UVs		
	point p1 = rotate(p, rotation1, 0.0, vector(0.0,0.0,1.0))/mix(ScaleMin, ScaleMax, pow(rotscale1[1],ScaleCurve))+point(position1[0] * UOffset, position1[1] * VOffset, 0.0);
	point p2 = rotate(p, rotation2, 0.0, vector(0.0,0.0,1.0))/mix(ScaleMin, ScaleMax, pow(rotscale2[1],ScaleCurve))+point(position2[0] * UOffset, position2[1] * VOffset, 0.0);
	point p3 = rotate(p, rotation3, 0.0, vector(0.0,0.0,1.0))/mix(ScaleMin, ScaleMax, pow(rotscale3[1],ScaleCurve))+point(position3[0] * UOffset, position3[1] * VOffset, 0.0);
	point p4 = rotate(p, rotation4, 0.0, vector(0.0,0.0,1.0))/mix(ScaleMin, ScaleMax, pow(rotscale4[1],ScaleCurve))+point(position4[0] * UOffset, position4[1] * VOffset, 0.0);

	// Import Albedo
	if (Albedo != ""){
		color Col1 = texture(Albedo, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Col2 = texture(Albedo, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Col3 = texture(Albedo, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Col4 = texture(Albedo, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		
	// HSV Albedo transform
	color hsv1 = transformc("rgb", "hsv", Col1); hsv1[0] += hsvTweak1[0]; hsv1[2] *= hsvTweak1[2];
	color hsv2 = transformc("rgb", "hsv", Col2); hsv2[0] += hsvTweak2[0]; hsv2[2] *= hsvTweak2[2];
	color hsv3 = transformc("rgb", "hsv", Col3); hsv3[0] += hsvTweak3[0]; hsv3[2] *= hsvTweak3[2];
	color hsv4 = transformc("rgb", "hsv", Col4); hsv4[0] += hsvTweak4[0]; hsv4[2] *= hsvTweak4[2];	
	Col1 = transformc("hsv", "rgb", hsv1); Col1 = pow(Col1, hsvTweak1[1]); 		
	Col2 = transformc("hsv", "rgb", hsv2); Col2 = pow(Col2, hsvTweak2[1]); 		
	Col3 = transformc("hsv", "rgb", hsv3); Col3 = pow(Col3, hsvTweak3[1]); 		
	Col4 = transformc("hsv", "rgb", hsv4); Col4 = pow(Col4, hsvTweak4[1]); 
	
	// Albedo Gamma
	if (AutoGamma)
		{
			if (!endswith(Albedo, ".exr") &&
				!endswith(Albedo, ".EXR") &&
				!endswith(Albedo, ".hdr") &&
				!endswith(Albedo, ".HDR") &&
				!endswith(Albedo, ".tx")  &&
				!endswith(Albedo, ".TX"))
			{
				// Gamma 2.2 for sRGB approx)
				Col1 = pow(Col1, 2.2);
				Col2 = pow(Col2, 2.2);
				Col3 = pow(Col3, 2.2);
				Col4 = pow(Col4, 2.2);
			}
		}
		else
		{
			if (ManualGamma != 1.0)
				Col1 = pow(Col1, ManualGamma);
				Col2 = pow(Col2, ManualGamma);
				Col3 = pow(Col3, ManualGamma);
				Col4 = pow(Col4, ManualGamma);
		}
		
	Col1 = mix(Col1,Col2,1-mask1); Col3=mix(Col3,Col4,1-mask1); outAlbedo=mix(Col1,Col3,1-mask2);
	}
	
	if (Metalness != ""){
		// Import Metalness
		color Metal1 = texture(Metalness, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Metal2 = texture(Metalness, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Metal3 = texture(Metalness, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Metal4 = texture(Metalness, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		Metal1 = mix(Metal1,Metal2,1-mask1); Metal3 = mix(Metal3,Metal4,1-mask1); outMetal = mix(Metal1,Metal3,1-mask2);
	}
	
	if (Roughness != ""){
		// Import Roughness
		color Rough1 = texture(Roughness, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Rough2 = texture(Roughness, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Rough3 = texture(Roughness, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Rough4 = texture(Roughness, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		Rough1 = mix(Rough1,Rough2,1-mask1); Rough3 = mix(Rough3,Rough4,1-mask1); outRough = mix(Rough1,Rough3,1-mask2);	
	}
	
	if (AO != ""){
		// Import AO
		color AO1 = texture(AO, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color AO2 = texture(AO, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color AO3 = texture(AO, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color AO4 = texture(AO, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);	
		AO1 = mix(AO1,AO2,1-mask1); AO3 = mix(AO3,AO4,1-mask1); outAO = mix(AO1,AO3,1-mask2);
	}
	
	if (Emission != ""){
		// Import Emission
		color Emit1 = texture(Metalness, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Emit2 = texture(Metalness, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Emit3 = texture(Metalness, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Emit4 = texture(Metalness, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		Emit1  = mix(Emit1,Emit2,  1-mask1); Emit3 = mix(Emit3,Emit4, 1-mask1); outEmit = mix(Emit1,Emit3,  1-mask2);
	}
	
	if (Opacity != ""){
		// Import Opacity
		color Opac1 = texture(Opacity, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Opac2 = texture(Opacity, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Opac3 = texture(Opacity, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Opac4 = texture(Opacity, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		Opac1  = mix(Opac1,Opac2, 1-mask1); Opac3 = mix(Opac3,Opac4, 1-mask1); outOpac = mix(Opac1,Opac3,  1-mask2);
	}
	if (Displace != "") {
		// Import Displacement
		color Disp1 = texture(Displace, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Disp2 = texture(Displace, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Disp3 = texture(Displace, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Disp4 = texture(Displace, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		
		// Scale displacement map	
		if (ScaleMult)	{				
			Disp1 *= mix(ScaleMin, ScaleMax, pow(rotscale1[1],ScaleCurve))/ScaleMax;
			Disp2 *= mix(ScaleMin, ScaleMax, pow(rotscale2[1],ScaleCurve))/ScaleMax;
			Disp3 *= mix(ScaleMin, ScaleMax, pow(rotscale3[1],ScaleCurve))/ScaleMax;
			Disp4 *= mix(ScaleMin, ScaleMax, pow(rotscale4[1],ScaleCurve))/ScaleMax;
		}
		Disp1=mix(Disp1,Disp2,1-mask1); Disp3 = mix(Disp3,Disp4,1-mask1); outDisp=mix(Disp1,Disp3,1-mask2);
	}
	
	if (Normal != "") {
		// Import Normal
		color Norm1 = texture(Normal, p1[0], 1.0 - p1[1], "wrap", WrapMode, "missingalpha", 1);
		color Norm2 = texture(Normal, p2[0], 1.0 - p2[1], "wrap", WrapMode, "missingalpha", 1);
		color Norm3 = texture(Normal, p3[0], 1.0 - p3[1], "wrap", WrapMode, "missingalpha", 1);
		color Norm4 = texture(Normal, p4[0], 1.0 - p4[1], "wrap", WrapMode, "missingalpha", 1);
		
		// Scale normal map
		if (ScaleMult)	{			
			Norm1 = mix(color(.5,.5,1), Norm1, pow(rotscale1[1],ScaleCurve));
			Norm2 = mix(color(.5,.5,1), Norm2, pow(rotscale2[1],ScaleCurve));
			Norm3 = mix(color(.5,.5,1), Norm3, pow(rotscale3[1],ScaleCurve));
			Norm4 = mix(color(.5,.5,1), Norm4, pow(rotscale4[1],ScaleCurve));
		}	
		Norm1=mix(Norm1,Norm2,1-mask1); Norm3=mix(Norm3,Norm4,1-mask1); outNorm=mix(Norm1,Norm3,1-mask2);	

	}			
}